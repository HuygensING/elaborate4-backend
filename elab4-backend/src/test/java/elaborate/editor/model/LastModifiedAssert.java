package elaborate.editor.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import elaborate.editor.model.orm.User;
import java.util.Date;


/**
 * {@link LastModified} specific assertions - Generated by CustomAssertionGenerator.
 */
public class LastModifiedAssert extends AbstractAssert<LastModifiedAssert, LastModified> {

  /**
   * Creates a new </code>{@link LastModifiedAssert}</code> to make assertions on actual LastModified.
   * @param actual the LastModified we want to make assertions on.
   */
  public LastModifiedAssert(LastModified actual) {
    super(actual, LastModifiedAssert.class);
  }

  /**
   * An entry point for LastModifiedAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myLastModified)</code> and get specific assertion with code completion.
   * @param actual the LastModified we want to make assertions on.
   * @return a new </code>{@link LastModifiedAssert}</code>
   */
  public static LastModifiedAssert assertThat(LastModified actual) {
    return new LastModifiedAssert(actual);
  }

  /**
   * Verifies that the actual LastModified's by is equal to the given one.
   * @param by the given by to compare the actual LastModified's by to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LastModified's by is not equal to the given one.
   */
  public LastModifiedAssert hasBy(String by) {
    // check that actual LastModified we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected by of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualBy = actual.getBy();
    if (!org.assertj.core.util.Objects.areEqual(actualBy, by)) {
      failWithMessage(errorMessage, actual, by, actualBy);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LastModified's date is equal to the given one.
   * @param date the given date to compare the actual LastModified's date to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LastModified's date is not equal to the given one.
   */
  public LastModifiedAssert hasDate(Date date) {
    // check that actual LastModified we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected date of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualDate = actual.getDate();
    if (!org.assertj.core.util.Objects.areEqual(actualDate, date)) {
      failWithMessage(errorMessage, actual, date, actualDate);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LastModified's dateString is equal to the given one.
   * @param dateString the given dateString to compare the actual LastModified's dateString to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LastModified's dateString is not equal to the given one.
   */
  public LastModifiedAssert hasDateString(String dateString) {
    // check that actual LastModified we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected dateString of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualDateString = actual.getDateString();
    if (!org.assertj.core.util.Objects.areEqual(actualDateString, dateString)) {
      failWithMessage(errorMessage, actual, dateString, actualDateString);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LastModified's user is equal to the given one.
   * @param user the given user to compare the actual LastModified's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LastModified's user is not equal to the given one.
   */
  public LastModifiedAssert hasUser(User user) {
    // check that actual LastModified we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualUser = actual.getUser();
    if (!org.assertj.core.util.Objects.areEqual(actualUser, user)) {
      failWithMessage(errorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

}
