package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;

/**
 * {@link User} specific assertions - Generated by CustomAssertionGenerator.
 */
public class UserAssert extends AbstractAssert<UserAssert, User> {

  /**
   * Creates a new </code>{@link UserAssert}</code> to make assertions on actual User.
   * @param actual the User we want to make assertions on.
   */
  public UserAssert(User actual) {
    super(actual, UserAssert.class);
  }

  /**
   * An entry point for UserAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myUser)</code> and get specific assertion with code completion.
   * @param actual the User we want to make assertions on.
   * @return a new </code>{@link UserAssert}</code>
   */
  public static UserAssert assertThat(User actual) {
    return new UserAssert(actual);
  }

  /**
   * Verifies that the actual User's email is equal to the given one.
   * @param email the given email to compare the actual User's email to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's email is not equal to the given one.
   */
  public UserAssert hasEmail(String email) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected email of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualEmail = actual.getEmail();
    if (!org.assertj.core.util.Objects.areEqual(actualEmail, email)) {
      failWithMessage(errorMessage, actual, email, actualEmail);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's encodedPassword contains the given byte elements.
   * @param encodedPassword the given elements that should be contained in actual User's encodedPassword.
   * @return this assertion object.
   * @throws AssertionError if the actual User's encodedPassword does not contain all given byte elements.
   */
  public UserAssert hasEncodedPassword(byte... encodedPassword) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given byte varargs is not null.
    if (encodedPassword == null) throw new AssertionError("Expecting encodedPassword parameter not to be null.");

    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getEncodedPassword()).contains(encodedPassword);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getEncodedPassword().contains(encodedPassword)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getEncodedPassword()).overridingErrorMessage("\nmy error message %s", "arg1").contains(encodedPassword);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User has no encodedPassword.
   * @return this assertion object.
   * @throws AssertionError if the actual User's encodedPassword is not empty.
   */
  public UserAssert hasNoEncodedPassword() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have encodedPassword but had :\n  <%s>";

    // check
    if (actual.getEncodedPassword().length > 0) {
      failWithMessage(errorMessage, actual, java.util.Arrays.toString(actual.getEncodedPassword()));
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's firstName is equal to the given one.
   * @param firstName the given firstName to compare the actual User's firstName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's firstName is not equal to the given one.
   */
  public UserAssert hasFirstName(String firstName) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected firstName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFirstName = actual.getFirstName();
    if (!org.assertj.core.util.Objects.areEqual(actualFirstName, firstName)) {
      failWithMessage(errorMessage, actual, firstName, actualFirstName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's id is equal to the given one.
   * @param id the given id to compare the actual User's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's id is not equal to the given one.
   */
  public UserAssert hasId(long id) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's lastName is equal to the given one.
   * @param lastName the given lastName to compare the actual User's lastName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's lastName is not equal to the given one.
   */
  public UserAssert hasLastName(String lastName) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected lastName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualLastName = actual.getLastName();
    if (!org.assertj.core.util.Objects.areEqual(actualLastName, lastName)) {
      failWithMessage(errorMessage, actual, lastName, actualLastName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User is loggedIn.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is not loggedIn.
   */
  public UserAssert isLoggedIn() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isLoggedIn()) {
      failWithMessage("\nExpected actual User to be loggedIn but was not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User is not loggedIn.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is loggedIn.
   */
  public UserAssert isNotLoggedIn() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isLoggedIn()) {
      failWithMessage("\nExpected actual User not to be loggedIn but was.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's projects contains the given Project elements.
   * @param projects the given elements that should be contained in actual User's projects.
   * @return this assertion object.
   * @throws AssertionError if the actual User's projects does not contain all given Project elements.
   */
  public UserAssert hasProjects(Project... projects) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given Project varargs is not null.
    if (projects == null) throw new AssertionError("Expecting projects parameter not to be null.");

    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getProjects()).contains(projects);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getProjects().contains(projects)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getProjects()).overridingErrorMessage("\nmy error message %s", "arg1").contains(projects);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User has no projects.
   * @return this assertion object.
   * @throws AssertionError if the actual User's projects is not empty.
   */
  public UserAssert hasNoProjects() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have projects but had :\n  <%s>";

    // check
    if (!actual.getProjects().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getProjects());
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's rev is equal to the given one.
   * @param rev the given rev to compare the actual User's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's rev is not equal to the given one.
   */
  public UserAssert hasRev(long rev) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's role is equal to the given one.
   * @param role the given role to compare the actual User's role to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's role is not equal to the given one.
   */
  public UserAssert hasRole(String role) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected role of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRole = actual.getRole();
    if (!org.assertj.core.util.Objects.areEqual(actualRole, role)) {
      failWithMessage(errorMessage, actual, role, actualRole);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's roleString is equal to the given one.
   * @param roleString the given roleString to compare the actual User's roleString to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's roleString is not equal to the given one.
   */
  public UserAssert hasRoleString(String roleString) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected roleString of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualRoleString = actual.getRoleString();
    if (!org.assertj.core.util.Objects.areEqual(actualRoleString, roleString)) {
      failWithMessage(errorMessage, actual, roleString, actualRoleString);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User is root.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is not root.
   */
  public UserAssert isRoot() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isRoot()) {
      failWithMessage("\nExpected actual User to be root but was not.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User is not root.
   * @return this assertion object.
   * @throws AssertionError - if the actual User is root.
   */
  public UserAssert isNotRoot() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isRoot()) {
      failWithMessage("\nExpected actual User not to be root but was.");
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's title is equal to the given one.
   * @param title the given title to compare the actual User's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's title is not equal to the given one.
   */
  public UserAssert hasTitle(String title) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualTitle = actual.getTitle();
    if (!org.assertj.core.util.Objects.areEqual(actualTitle, title)) {
      failWithMessage(errorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's userSettings contains the given UserSetting elements.
   * @param userSettings the given elements that should be contained in actual User's userSettings.
   * @return this assertion object.
   * @throws AssertionError if the actual User's userSettings does not contain all given UserSetting elements.
   */
  public UserAssert hasUserSettings(UserSetting... userSettings) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // check that given UserSetting varargs is not null.
    if (userSettings == null) throw new AssertionError("Expecting userSettings parameter not to be null.");

    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getUserSettings()).contains(userSettings);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getUserSettings().contains(userSettings)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getUserSettings()).overridingErrorMessage("\nmy error message %s", "arg1").contains(userSettings);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User has no userSettings.
   * @return this assertion object.
   * @throws AssertionError if the actual User's userSettings is not empty.
   */
  public UserAssert hasNoUserSettings() {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have userSettings but had :\n  <%s>";

    // check
    if (!actual.getUserSettings().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getUserSettings());
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual User's username is equal to the given one.
   * @param username the given username to compare the actual User's username to.
   * @return this assertion object.
   * @throws AssertionError - if the actual User's username is not equal to the given one.
   */
  public UserAssert hasUsername(String username) {
    // check that actual User we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected username of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUsername = actual.getUsername();
    if (!org.assertj.core.util.Objects.areEqual(actualUsername, username)) {
      failWithMessage(errorMessage, actual, username, actualUsername);
    }

    // return the current assertion for method chaining
    return this;
  }

}
