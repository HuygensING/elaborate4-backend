package elaborate.editor.model.orm;

import java.util.Map;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link AnnotationTypeMetadataItem} specific assertions - Generated by CustomAssertionGenerator.
 */
public class AnnotationTypeMetadataItemAssert extends AbstractAssert<AnnotationTypeMetadataItemAssert, AnnotationTypeMetadataItem> {

  /**
   * Creates a new </code>{@link AnnotationTypeMetadataItemAssert}</code> to make assertions on actual AnnotationTypeMetadataItem.
   * @param actual the AnnotationTypeMetadataItem we want to make assertions on.
   */
  public AnnotationTypeMetadataItemAssert(AnnotationTypeMetadataItem actual) {
    super(actual, AnnotationTypeMetadataItemAssert.class);
  }

  /**
   * An entry point for AnnotationTypeMetadataItemAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myAnnotationTypeMetadataItem)</code> and get specific assertion with code completion.
   * @param actual the AnnotationTypeMetadataItem we want to make assertions on.
   * @return a new </code>{@link AnnotationTypeMetadataItemAssert}</code>
   */
  public static AnnotationTypeMetadataItemAssert assertThat(AnnotationTypeMetadataItem actual) {
    return new AnnotationTypeMetadataItemAssert(actual);
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's annotationType is equal to the given one.
   * @param annotationType the given annotationType to compare the actual AnnotationTypeMetadataItem's annotationType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's annotationType is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasAnnotationType(AnnotationType annotationType) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected annotationType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    AnnotationType actualAnnotationType = actual.getAnnotationType();
    if (!org.assertj.core.util.Objects.areEqual(actualAnnotationType, annotationType)) {
      failWithMessage(errorMessage, actual, annotationType, actualAnnotationType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's dataMap is equal to the given one.
   * @param dataMap the given dataMap to compare the actual AnnotationTypeMetadataItem's dataMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's dataMap is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasDataMap(Map dataMap) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected dataMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Map actualDataMap = actual.getDataMap();
    if (!org.assertj.core.util.Objects.areEqual(actualDataMap, dataMap)) {
      failWithMessage(errorMessage, actual, dataMap, actualDataMap);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's description is equal to the given one.
   * @param description the given description to compare the actual AnnotationTypeMetadataItem's description to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's description is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasDescription(String description) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected description of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualDescription = actual.getDescription();
    if (!org.assertj.core.util.Objects.areEqual(actualDescription, description)) {
      failWithMessage(errorMessage, actual, description, actualDescription);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's id is equal to the given one.
   * @param id the given id to compare the actual AnnotationTypeMetadataItem's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's id is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasId(long id) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's name is equal to the given one.
   * @param name the given name to compare the actual AnnotationTypeMetadataItem's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's name is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasName(String name) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(errorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationTypeMetadataItem's rev is equal to the given one.
   * @param rev the given rev to compare the actual AnnotationTypeMetadataItem's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationTypeMetadataItem's rev is not equal to the given one.
   */
  public AnnotationTypeMetadataItemAssert hasRev(long rev) {
    // check that actual AnnotationTypeMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

}
