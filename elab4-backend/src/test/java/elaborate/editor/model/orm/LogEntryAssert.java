package elaborate.editor.model.orm;

import java.util.Date;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link LogEntry} specific assertions - Generated by CustomAssertionGenerator.
 */
public class LogEntryAssert extends AbstractAssert<LogEntryAssert, LogEntry> {

  /**
   * Creates a new </code>{@link LogEntryAssert}</code> to make assertions on actual LogEntry.
   * @param actual the LogEntry we want to make assertions on.
   */
  public LogEntryAssert(LogEntry actual) {
    super(actual, LogEntryAssert.class);
  }

  /**
   * An entry point for LogEntryAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myLogEntry)</code> and get specific assertion with code completion.
   * @param actual the LogEntry we want to make assertions on.
   * @return a new </code>{@link LogEntryAssert}</code>
   */
  public static LogEntryAssert assertThat(LogEntry actual) {
    return new LogEntryAssert(actual);
  }

  /**
   * Verifies that the actual LogEntry's comment is equal to the given one.
   * @param comment the given comment to compare the actual LogEntry's comment to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's comment is not equal to the given one.
   */
  public LogEntryAssert hasComment(String comment) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected comment of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualComment = actual.getComment();
    if (!org.assertj.core.util.Objects.areEqual(actualComment, comment)) {
      failWithMessage(errorMessage, actual, comment, actualComment);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's createdOn is equal to the given one.
   * @param createdOn the given createdOn to compare the actual LogEntry's createdOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's createdOn is not equal to the given one.
   */
  public LogEntryAssert hasCreatedOn(Date createdOn) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected createdOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Date actualCreatedOn = actual.getCreatedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualCreatedOn, createdOn)) {
      failWithMessage(errorMessage, actual, createdOn, actualCreatedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's id is equal to the given one.
   * @param id the given id to compare the actual LogEntry's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's id is not equal to the given one.
   */
  public LogEntryAssert hasId(long id) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's project is equal to the given one.
   * @param project the given project to compare the actual LogEntry's project to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's project is not equal to the given one.
   */
  public LogEntryAssert hasProject(Project project) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected project of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Project actualProject = actual.getProject();
    if (!org.assertj.core.util.Objects.areEqual(actualProject, project)) {
      failWithMessage(errorMessage, actual, project, actualProject);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's projectTitle is equal to the given one.
   * @param projectTitle the given projectTitle to compare the actual LogEntry's projectTitle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's projectTitle is not equal to the given one.
   */
  public LogEntryAssert hasProjectTitle(String projectTitle) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected projectTitle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualProjectTitle = actual.getProjectTitle();
    if (!org.assertj.core.util.Objects.areEqual(actualProjectTitle, projectTitle)) {
      failWithMessage(errorMessage, actual, projectTitle, actualProjectTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's rev is equal to the given one.
   * @param rev the given rev to compare the actual LogEntry's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's rev is not equal to the given one.
   */
  public LogEntryAssert hasRev(long rev) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual LogEntry's userName is equal to the given one.
   * @param userName the given userName to compare the actual LogEntry's userName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual LogEntry's userName is not equal to the given one.
   */
  public LogEntryAssert hasUserName(String userName) {
    // check that actual LogEntry we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected userName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualUserName = actual.getUserName();
    if (!org.assertj.core.util.Objects.areEqual(actualUserName, userName)) {
      failWithMessage(errorMessage, actual, userName, actualUserName);
    }

    // return the current assertion for method chaining
    return this;
  }

}
