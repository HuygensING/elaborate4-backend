package elaborate.editor.model.orm;

import java.util.Date;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;

/**
 * {@link ProjectMetadataField} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProjectMetadataFieldAssert extends AbstractAssert<ProjectMetadataFieldAssert, ProjectMetadataField> {

  /**
   * Creates a new </code>{@link ProjectMetadataFieldAssert}</code> to make assertions on actual ProjectMetadataField.
   * @param actual the ProjectMetadataField we want to make assertions on.
   */
  public ProjectMetadataFieldAssert(ProjectMetadataField actual) {
    super(actual, ProjectMetadataFieldAssert.class);
  }

  /**
   * An entry point for ProjectMetadataFieldAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myProjectMetadataField)</code> and get specific assertion with code completion.
   * @param actual the ProjectMetadataField we want to make assertions on.
   * @return a new </code>{@link ProjectMetadataFieldAssert}</code>
   */
  public static ProjectMetadataFieldAssert assertThat(ProjectMetadataField actual) {
    return new ProjectMetadataFieldAssert(actual);
  }

  /**
   * Verifies that the actual ProjectMetadataField's createdOn is equal to the given one.
   * @param createdOn the given createdOn to compare the actual ProjectMetadataField's createdOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's createdOn is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasCreatedOn(Date createdOn) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected createdOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Date actualCreatedOn = actual.getCreatedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualCreatedOn, createdOn)) {
      failWithMessage(errorMessage, actual, createdOn, actualCreatedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's creator is equal to the given one.
   * @param creator the given creator to compare the actual ProjectMetadataField's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's creator is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasCreator(User creator) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    User actualCreator = actual.getCreator();
    if (!org.assertj.core.util.Objects.areEqual(actualCreator, creator)) {
      failWithMessage(errorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's fieldName is equal to the given one.
   * @param fieldName the given fieldName to compare the actual ProjectMetadataField's fieldName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's fieldName is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasFieldName(String fieldName) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected fieldName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualFieldName = actual.getFieldName();
    if (!org.assertj.core.util.Objects.areEqual(actualFieldName, fieldName)) {
      failWithMessage(errorMessage, actual, fieldName, actualFieldName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's id is equal to the given one.
   * @param id the given id to compare the actual ProjectMetadataField's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's id is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasId(long id) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's modifiedOn is equal to the given one.
   * @param modifiedOn the given modifiedOn to compare the actual ProjectMetadataField's modifiedOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's modifiedOn is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasModifiedOn(Date modifiedOn) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected modifiedOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Date actualModifiedOn = actual.getModifiedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualModifiedOn, modifiedOn)) {
      failWithMessage(errorMessage, actual, modifiedOn, actualModifiedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's modifier is equal to the given one.
   * @param modifier the given modifier to compare the actual ProjectMetadataField's modifier to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's modifier is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasModifier(User modifier) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected modifier of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    User actualModifier = actual.getModifier();
    if (!org.assertj.core.util.Objects.areEqual(actualModifier, modifier)) {
      failWithMessage(errorMessage, actual, modifier, actualModifier);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's rev is equal to the given one.
   * @param rev the given rev to compare the actual ProjectMetadataField's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's rev is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasRev(long rev) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's valueOptions is equal to the given one.
   * @param valueOptions the given valueOptions to compare the actual ProjectMetadataField's valueOptions to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectMetadataField's valueOptions is not equal to the given one.
   */
  public ProjectMetadataFieldAssert hasValueOptions(String valueOptions) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected valueOptions of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualValueOptions = actual.getValueOptions();
    if (!org.assertj.core.util.Objects.areEqual(actualValueOptions, valueOptions)) {
      failWithMessage(errorMessage, actual, valueOptions, actualValueOptions);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField's valueOptionsAsList contains the given String elements.
   * @param valueOptionsAsList the given elements that should be contained in actual ProjectMetadataField's valueOptionsAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual ProjectMetadataField's valueOptionsAsList does not contain all given String elements.
   */
  public ProjectMetadataFieldAssert hasValueOptionsAsList(String... valueOptionsAsList) {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (valueOptionsAsList == null) throw new AssertionError("Expecting valueOptionsAsList parameter not to be null.");

    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getValueOptionsAsList()).contains(valueOptionsAsList);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getValueOptionsAsList().contains(valueOptionsAsList)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getValueOptionsAsList()).overridingErrorMessage("\nmy error message %s", "arg1").contains(valueOptionsAsList);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectMetadataField has no valueOptionsAsList.
   * @return this assertion object.
   * @throws AssertionError if the actual ProjectMetadataField's valueOptionsAsList is not empty.
   */
  public ProjectMetadataFieldAssert hasNoValueOptionsAsList() {
    // check that actual ProjectMetadataField we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have valueOptionsAsList but had :\n  <%s>";

    // check
    if (!actual.getValueOptionsAsList().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getValueOptionsAsList());
    }

    // return the current assertion for method chaining
    return this;
  }

}
