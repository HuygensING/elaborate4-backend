package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link ProjectEntryMetadataField} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProjectEntryMetadataFieldAssert extends AbstractAssert<ProjectEntryMetadataFieldAssert, ProjectEntryMetadataField> {

  /**
   * Creates a new </code>{@link ProjectEntryMetadataFieldAssert}</code> to make assertions on actual ProjectEntryMetadataField.
   * @param actual the ProjectEntryMetadataField we want to make assertions on.
   */
  public ProjectEntryMetadataFieldAssert(ProjectEntryMetadataField actual) {
    super(actual, ProjectEntryMetadataFieldAssert.class);
  }

  /**
   * An entry point for ProjectEntryMetadataFieldAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myProjectEntryMetadataField)</code> and get specific assertion with code completion.
   * @param actual the ProjectEntryMetadataField we want to make assertions on.
   * @return a new </code>{@link ProjectEntryMetadataFieldAssert}</code>
   */
  public static ProjectEntryMetadataFieldAssert assertThat(ProjectEntryMetadataField actual) {
    return new ProjectEntryMetadataFieldAssert(actual);
  }

  /**
   * Verifies that the actual ProjectEntryMetadataField's field is equal to the given one.
   * @param field the given field to compare the actual ProjectEntryMetadataField's field to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectEntryMetadataField's field is not equal to the given one.
   */
  public ProjectEntryMetadataFieldAssert hasField(String field) {
    // check that actual ProjectEntryMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected field of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualField = actual.getField();
    if (!org.assertj.core.util.Objects.areEqual(actualField, field)) {
      failWithMessage(errorMessage, actual, field, actualField);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectEntryMetadataField's id is equal to the given one.
   * @param id the given id to compare the actual ProjectEntryMetadataField's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectEntryMetadataField's id is not equal to the given one.
   */
  public ProjectEntryMetadataFieldAssert hasId(long id) {
    // check that actual ProjectEntryMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ProjectEntryMetadataField's rev is equal to the given one.
   * @param rev the given rev to compare the actual ProjectEntryMetadataField's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ProjectEntryMetadataField's rev is not equal to the given one.
   */
  public ProjectEntryMetadataFieldAssert hasRev(long rev) {
    // check that actual ProjectEntryMetadataField we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

}
