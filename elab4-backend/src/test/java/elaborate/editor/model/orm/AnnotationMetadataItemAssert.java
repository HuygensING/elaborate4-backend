package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link AnnotationMetadataItem} specific assertions - Generated by CustomAssertionGenerator.
 */
public class AnnotationMetadataItemAssert extends AbstractAssert<AnnotationMetadataItemAssert, AnnotationMetadataItem> {

  /**
   * Creates a new </code>{@link AnnotationMetadataItemAssert}</code> to make assertions on actual AnnotationMetadataItem.
   * @param actual the AnnotationMetadataItem we want to make assertions on.
   */
  public AnnotationMetadataItemAssert(AnnotationMetadataItem actual) {
    super(actual, AnnotationMetadataItemAssert.class);
  }

  /**
   * An entry point for AnnotationMetadataItemAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myAnnotationMetadataItem)</code> and get specific assertion with code completion.
   * @param actual the AnnotationMetadataItem we want to make assertions on.
   * @return a new </code>{@link AnnotationMetadataItemAssert}</code>
   */
  public static AnnotationMetadataItemAssert assertThat(AnnotationMetadataItem actual) {
    return new AnnotationMetadataItemAssert(actual);
  }

  /**
   * Verifies that the actual AnnotationMetadataItem's annotation is equal to the given one.
   * @param annotation the given annotation to compare the actual AnnotationMetadataItem's annotation to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationMetadataItem's annotation is not equal to the given one.
   */
  public AnnotationMetadataItemAssert hasAnnotation(Annotation annotation) {
    // check that actual AnnotationMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected annotation of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    Annotation actualAnnotation = actual.getAnnotation();
    if (!org.assertj.core.util.Objects.areEqual(actualAnnotation, annotation)) {
      failWithMessage(errorMessage, actual, annotation, actualAnnotation);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationMetadataItem's annotationTypeMetadataItem is equal to the given one.
   * @param annotationTypeMetadataItem the given annotationTypeMetadataItem to compare the actual AnnotationMetadataItem's annotationTypeMetadataItem to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationMetadataItem's annotationTypeMetadataItem is not equal to the given one.
   */
  public AnnotationMetadataItemAssert hasAnnotationTypeMetadataItem(AnnotationTypeMetadataItem annotationTypeMetadataItem) {
    // check that actual AnnotationMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected annotationTypeMetadataItem of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    AnnotationTypeMetadataItem actualAnnotationTypeMetadataItem = actual.getAnnotationTypeMetadataItem();
    if (!org.assertj.core.util.Objects.areEqual(actualAnnotationTypeMetadataItem, annotationTypeMetadataItem)) {
      failWithMessage(errorMessage, actual, annotationTypeMetadataItem, actualAnnotationTypeMetadataItem);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationMetadataItem's data is equal to the given one.
   * @param data the given data to compare the actual AnnotationMetadataItem's data to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationMetadataItem's data is not equal to the given one.
   */
  public AnnotationMetadataItemAssert hasData(String data) {
    // check that actual AnnotationMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected data of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualData = actual.getData();
    if (!org.assertj.core.util.Objects.areEqual(actualData, data)) {
      failWithMessage(errorMessage, actual, data, actualData);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationMetadataItem's id is equal to the given one.
   * @param id the given id to compare the actual AnnotationMetadataItem's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationMetadataItem's id is not equal to the given one.
   */
  public AnnotationMetadataItemAssert hasId(long id) {
    // check that actual AnnotationMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AnnotationMetadataItem's rev is equal to the given one.
   * @param rev the given rev to compare the actual AnnotationMetadataItem's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AnnotationMetadataItem's rev is not equal to the given one.
   */
  public AnnotationMetadataItemAssert hasRev(long rev) {
    // check that actual AnnotationMetadataItem we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

}
