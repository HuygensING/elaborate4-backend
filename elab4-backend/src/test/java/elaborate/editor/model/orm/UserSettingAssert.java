package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;

// Assertions is needed if an assertion for Iterable is generated

/**
 * {@link UserSetting} specific assertions - Generated by CustomAssertionGenerator.
 */
public class UserSettingAssert extends AbstractAssert<UserSettingAssert, UserSetting> {

  /**
   * Creates a new </code>{@link UserSettingAssert}</code> to make assertions on actual UserSetting.
   * @param actual the UserSetting we want to make assertions on.
   */
  public UserSettingAssert(UserSetting actual) {
    super(actual, UserSettingAssert.class);
  }

  /**
   * An entry point for UserSettingAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myUserSetting)</code> and get specific assertion with code completion.
   * @param actual the UserSetting we want to make assertions on.
   * @return a new </code>{@link UserSettingAssert}</code>
   */
  public static UserSettingAssert assertThat(UserSetting actual) {
    return new UserSettingAssert(actual);
  }

  /**
   * Verifies that the actual UserSetting's id is equal to the given one.
   * @param id the given id to compare the actual UserSetting's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserSetting's id is not equal to the given one.
   */
  public UserSettingAssert hasId(long id) {
    // check that actual UserSetting we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual UserSetting's key is equal to the given one.
   * @param key the given key to compare the actual UserSetting's key to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserSetting's key is not equal to the given one.
   */
  public UserSettingAssert hasKey(String key) {
    // check that actual UserSetting we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected key of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualKey = actual.getKey();
    if (!org.assertj.core.util.Objects.areEqual(actualKey, key)) {
      failWithMessage(errorMessage, actual, key, actualKey);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual UserSetting's rev is equal to the given one.
   * @param rev the given rev to compare the actual UserSetting's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserSetting's rev is not equal to the given one.
   */
  public UserSettingAssert hasRev(long rev) {
    // check that actual UserSetting we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual UserSetting's user is equal to the given one.
   * @param user the given user to compare the actual UserSetting's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserSetting's user is not equal to the given one.
   */
  public UserSettingAssert hasUser(User user) {
    // check that actual UserSetting we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    User actualUser = actual.getUser();
    if (!org.assertj.core.util.Objects.areEqual(actualUser, user)) {
      failWithMessage(errorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual UserSetting's value is equal to the given one.
   * @param value the given value to compare the actual UserSetting's value to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserSetting's value is not equal to the given one.
   */
  public UserSettingAssert hasValue(String value) {
    // check that actual UserSetting we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected value of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualValue = actual.getValue();
    if (!org.assertj.core.util.Objects.areEqual(actualValue, value)) {
      failWithMessage(errorMessage, actual, value, actualValue);
    }

    // return the current assertion for method chaining
    return this;
  }

}
