package elaborate.editor.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import elaborate.editor.model.orm.User;
import java.security.Principal;


/**
 * {@link ElaborateSecurityContext} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ElaborateSecurityContextAssert extends AbstractAssert<ElaborateSecurityContextAssert, ElaborateSecurityContext> {

  /**
   * Creates a new </code>{@link ElaborateSecurityContextAssert}</code> to make assertions on actual ElaborateSecurityContext.
   * @param actual the ElaborateSecurityContext we want to make assertions on.
   */
  public ElaborateSecurityContextAssert(ElaborateSecurityContext actual) {
    super(actual, ElaborateSecurityContextAssert.class);
  }

  /**
   * An entry point for ElaborateSecurityContextAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myElaborateSecurityContext)</code> and get specific assertion with code completion.
   * @param actual the ElaborateSecurityContext we want to make assertions on.
   * @return a new </code>{@link ElaborateSecurityContextAssert}</code>
   */
  public static ElaborateSecurityContextAssert assertThat(ElaborateSecurityContext actual) {
    return new ElaborateSecurityContextAssert(actual);
  }

  /**
   * Verifies that the actual ElaborateSecurityContext's authenticationScheme is equal to the given one.
   * @param authenticationScheme the given authenticationScheme to compare the actual ElaborateSecurityContext's authenticationScheme to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ElaborateSecurityContext's authenticationScheme is not equal to the given one.
   */
  public ElaborateSecurityContextAssert hasAuthenticationScheme(String authenticationScheme) {
    // check that actual ElaborateSecurityContext we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected authenticationScheme of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualAuthenticationScheme = actual.getAuthenticationScheme();
    if (!org.assertj.core.util.Objects.areEqual(actualAuthenticationScheme, authenticationScheme)) {
      failWithMessage(errorMessage, actual, authenticationScheme, actualAuthenticationScheme);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ElaborateSecurityContext is secure.
   * @return this assertion object.
   * @throws AssertionError - if the actual ElaborateSecurityContext is not secure.
   */
  public ElaborateSecurityContextAssert isSecure() {
    // check that actual ElaborateSecurityContext we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isSecure()) {
      failWithMessage("\nExpected actual ElaborateSecurityContext to be secure but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ElaborateSecurityContext is not secure.
   * @return this assertion object.
   * @throws AssertionError - if the actual ElaborateSecurityContext is secure.
   */
  public ElaborateSecurityContextAssert isNotSecure() {
    // check that actual ElaborateSecurityContext we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isSecure()) {
      failWithMessage("\nExpected actual ElaborateSecurityContext not to be secure but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ElaborateSecurityContext's user is equal to the given one.
   * @param user the given user to compare the actual ElaborateSecurityContext's user to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ElaborateSecurityContext's user is not equal to the given one.
   */
  public ElaborateSecurityContextAssert hasUser(User user) {
    // check that actual ElaborateSecurityContext we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected user of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualUser = actual.getUser();
    if (!org.assertj.core.util.Objects.areEqual(actualUser, user)) {
      failWithMessage(errorMessage, actual, user, actualUser);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ElaborateSecurityContext's userPrincipal is equal to the given one.
   * @param userPrincipal the given userPrincipal to compare the actual ElaborateSecurityContext's userPrincipal to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ElaborateSecurityContext's userPrincipal is not equal to the given one.
   */
  public ElaborateSecurityContextAssert hasUserPrincipal(Principal userPrincipal) {
    // check that actual ElaborateSecurityContext we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected userPrincipal of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Principal actualUserPrincipal = actual.getUserPrincipal();
    if (!org.assertj.core.util.Objects.areEqual(actualUserPrincipal, userPrincipal)) {
      failWithMessage(errorMessage, actual, userPrincipal, actualUserPrincipal);
    }

    // return the current assertion for method chaining
    return this;
  }

}
