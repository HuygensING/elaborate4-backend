package elaborate.editor.model;

import nl.knaw.huygens.solr.FacetInfo;
import nl.knaw.huygens.solr.FacetType;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link FacetInfo} specific assertions - Generated by CustomAssertionGenerator.
 */
public class FacetInfoAssert extends AbstractAssert<FacetInfoAssert, FacetInfo> {

  /**
   * Creates a new </code>{@link FacetInfoAssert}</code> to make assertions on actual FacetInfo.
   * @param actual the FacetInfo we want to make assertions on.
   */
  public FacetInfoAssert(FacetInfo actual) {
    super(actual, FacetInfoAssert.class);
  }

  /**
   * An entry point for FacetInfoAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myFacetInfo)</code> and get specific assertion with code completion.
   * @param actual the FacetInfo we want to make assertions on.
   * @return a new </code>{@link FacetInfoAssert}</code>
   */
  public static FacetInfoAssert assertThat(FacetInfo actual) {
    return new FacetInfoAssert(actual);
  }

  /**
   * Verifies that the actual FacetInfo's name is equal to the given one.
   * @param name the given name to compare the actual FacetInfo's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FacetInfo's name is not equal to the given one.
   */
  public FacetInfoAssert hasName(String name) {
    // check that actual FacetInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(errorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FacetInfo's title is equal to the given one.
   * @param title the given title to compare the actual FacetInfo's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FacetInfo's title is not equal to the given one.
   */
  public FacetInfoAssert hasTitle(String title) {
    // check that actual FacetInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!org.assertj.core.util.Objects.areEqual(actualTitle, title)) {
      failWithMessage(errorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual FacetInfo's type is equal to the given one.
   * @param type the given type to compare the actual FacetInfo's type to.
   * @return this assertion object.
   * @throws AssertionError - if the actual FacetInfo's type is not equal to the given one.
   */
  public FacetInfoAssert hasType(FacetType type) {
    // check that actual FacetInfo we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected type of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    FacetType actualType = actual.getType();
    if (!org.assertj.core.util.Objects.areEqual(actualType, type)) {
      failWithMessage(errorMessage, actual, type, actualType);
    }

    // return the current assertion for method chaining
    return this;
  }

}
