package elaborate.editor.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import elaborate.editor.model.orm.ProjectEntry;
import elaborate.editor.model.orm.User;
import java.util.Date;


/**
 * {@link AbstractProjectEntryElement} specific assertions - Generated by CustomAssertionGenerator.
 */
public class AbstractProjectEntryElementAssert extends AbstractAssert<AbstractProjectEntryElementAssert, AbstractProjectEntryElement> {

  /**
   * Creates a new </code>{@link AbstractProjectEntryElementAssert}</code> to make assertions on actual AbstractProjectEntryElement.
   * @param actual the AbstractProjectEntryElement we want to make assertions on.
   */
  public AbstractProjectEntryElementAssert(AbstractProjectEntryElement actual) {
    super(actual, AbstractProjectEntryElementAssert.class);
  }

  /**
   * An entry point for AbstractProjectEntryElementAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myAbstractProjectEntryElement)</code> and get specific assertion with code completion.
   * @param actual the AbstractProjectEntryElement we want to make assertions on.
   * @return a new </code>{@link AbstractProjectEntryElementAssert}</code>
   */
  public static AbstractProjectEntryElementAssert assertThat(AbstractProjectEntryElement actual) {
    return new AbstractProjectEntryElementAssert(actual);
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's createdOn is equal to the given one.
   * @param createdOn the given createdOn to compare the actual AbstractProjectEntryElement's createdOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's createdOn is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasCreatedOn(Date createdOn) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected createdOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualCreatedOn = actual.getCreatedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualCreatedOn, createdOn)) {
      failWithMessage(errorMessage, actual, createdOn, actualCreatedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's creator is equal to the given one.
   * @param creator the given creator to compare the actual AbstractProjectEntryElement's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's creator is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasCreator(User creator) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualCreator = actual.getCreator();
    if (!org.assertj.core.util.Objects.areEqual(actualCreator, creator)) {
      failWithMessage(errorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's id is equal to the given one.
   * @param id the given id to compare the actual AbstractProjectEntryElement's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's id is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasId(long id) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's modifiedOn is equal to the given one.
   * @param modifiedOn the given modifiedOn to compare the actual AbstractProjectEntryElement's modifiedOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's modifiedOn is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasModifiedOn(Date modifiedOn) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected modifiedOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualModifiedOn = actual.getModifiedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualModifiedOn, modifiedOn)) {
      failWithMessage(errorMessage, actual, modifiedOn, actualModifiedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's modifier is equal to the given one.
   * @param modifier the given modifier to compare the actual AbstractProjectEntryElement's modifier to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's modifier is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasModifier(User modifier) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected modifier of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualModifier = actual.getModifier();
    if (!org.assertj.core.util.Objects.areEqual(actualModifier, modifier)) {
      failWithMessage(errorMessage, actual, modifier, actualModifier);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's projectEntry is equal to the given one.
   * @param projectEntry the given projectEntry to compare the actual AbstractProjectEntryElement's projectEntry to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's projectEntry is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasProjectEntry(ProjectEntry projectEntry) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected projectEntry of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    ProjectEntry actualProjectEntry = actual.getProjectEntry();
    if (!org.assertj.core.util.Objects.areEqual(actualProjectEntry, projectEntry)) {
      failWithMessage(errorMessage, actual, projectEntry, actualProjectEntry);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual AbstractProjectEntryElement's rev is equal to the given one.
   * @param rev the given rev to compare the actual AbstractProjectEntryElement's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual AbstractProjectEntryElement's rev is not equal to the given one.
   */
  public AbstractProjectEntryElementAssert hasRev(long rev) {
    // check that actual AbstractProjectEntryElement we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

}
