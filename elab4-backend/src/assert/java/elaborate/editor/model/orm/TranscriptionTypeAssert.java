package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link TranscriptionType} specific assertions - Generated by CustomAssertionGenerator.
 */
public class TranscriptionTypeAssert extends AbstractAssert<TranscriptionTypeAssert, TranscriptionType> {

  /**
   * Creates a new </code>{@link TranscriptionTypeAssert}</code> to make assertions on actual TranscriptionType.
   * @param actual the TranscriptionType we want to make assertions on.
   */
  public TranscriptionTypeAssert(TranscriptionType actual) {
    super(actual, TranscriptionTypeAssert.class);
  }

  /**
   * An entry point for TranscriptionTypeAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myTranscriptionType)</code> and get specific assertion with code completion.
   * @param actual the TranscriptionType we want to make assertions on.
   * @return a new </code>{@link TranscriptionTypeAssert}</code>
   */
  public static TranscriptionTypeAssert assertThat(TranscriptionType actual) {
    return new TranscriptionTypeAssert(actual);
  }

  /**
   * Verifies that the actual TranscriptionType's id is equal to the given one.
   * @param id the given id to compare the actual TranscriptionType's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TranscriptionType's id is not equal to the given one.
   */
  public TranscriptionTypeAssert hasId(long id) {
    // check that actual TranscriptionType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TranscriptionType's name is equal to the given one.
   * @param name the given name to compare the actual TranscriptionType's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TranscriptionType's name is not equal to the given one.
   */
  public TranscriptionTypeAssert hasName(String name) {
    // check that actual TranscriptionType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(errorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TranscriptionType's rev is equal to the given one.
   * @param rev the given rev to compare the actual TranscriptionType's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual TranscriptionType's rev is not equal to the given one.
   */
  public TranscriptionTypeAssert hasRev(long rev) {
    // check that actual TranscriptionType we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TranscriptionType's transcriptions contains the given Transcription elements.
   * @param transcriptions the given elements that should be contained in actual TranscriptionType's transcriptions.
   * @return this assertion object.
   * @throws AssertionError if the actual TranscriptionType's transcriptions does not contain all given Transcription elements.
   */
  public TranscriptionTypeAssert hasTranscriptions(Transcription... transcriptions) {
    // check that actual TranscriptionType we want to make assertions on is not null.
    isNotNull();

    // check that given Transcription varargs is not null.
    if (transcriptions == null) throw new AssertionError("Expecting transcriptions parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTranscriptions()).contains(transcriptions);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getTranscriptions().contains(transcriptions)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getTranscriptions()).overridingErrorMessage("\nmy error message %s", "arg1").contains(transcriptions);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual TranscriptionType has no transcriptions.
   * @return this assertion object.
   * @throws AssertionError if the actual TranscriptionType's transcriptions is not empty.
   */
  public TranscriptionTypeAssert hasNoTranscriptions() {
    // check that actual TranscriptionType we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String errorMessage = "\nExpected :\n  <%s>\nnot to have transcriptions but had :\n  <%s>";
    
    // check
    if (!actual.getTranscriptions().isEmpty()) {
      failWithMessage(errorMessage, actual, actual.getTranscriptions());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
