package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import java.util.Date;
import java.util.Map;


/**
 * {@link SearchData} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SearchDataAssert extends AbstractAssert<SearchDataAssert, SearchData> {

  /**
   * Creates a new </code>{@link SearchDataAssert}</code> to make assertions on actual SearchData.
   * @param actual the SearchData we want to make assertions on.
   */
  public SearchDataAssert(SearchData actual) {
    super(actual, SearchDataAssert.class);
  }

  /**
   * An entry point for SearchDataAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(mySearchData)</code> and get specific assertion with code completion.
   * @param actual the SearchData we want to make assertions on.
   * @return a new </code>{@link SearchDataAssert}</code>
   */
  public static SearchDataAssert assertThat(SearchData actual) {
    return new SearchDataAssert(actual);
  }

  /**
   * Verifies that the actual SearchData's createdOn is equal to the given one.
   * @param createdOn the given createdOn to compare the actual SearchData's createdOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchData's createdOn is not equal to the given one.
   */
  public SearchDataAssert hasCreatedOn(Date createdOn) {
    // check that actual SearchData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected createdOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualCreatedOn = actual.getCreatedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualCreatedOn, createdOn)) {
      failWithMessage(errorMessage, actual, createdOn, actualCreatedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchData's id is equal to the given one.
   * @param id the given id to compare the actual SearchData's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchData's id is not equal to the given one.
   */
  public SearchDataAssert hasId(long id) {
    // check that actual SearchData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(errorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchData's json is equal to the given one.
   * @param json the given json to compare the actual SearchData's json to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchData's json is not equal to the given one.
   */
  public SearchDataAssert hasJson(String json) {
    // check that actual SearchData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected json of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualJson = actual.getJson();
    if (!org.assertj.core.util.Objects.areEqual(actualJson, json)) {
      failWithMessage(errorMessage, actual, json, actualJson);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchData's results is equal to the given one.
   * @param results the given results to compare the actual SearchData's results to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchData's results is not equal to the given one.
   */
  public SearchDataAssert hasResults(Map results) {
    // check that actual SearchData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected results of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Map actualResults = actual.getResults();
    if (!org.assertj.core.util.Objects.areEqual(actualResults, results)) {
      failWithMessage(errorMessage, actual, results, actualResults);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SearchData's rev is equal to the given one.
   * @param rev the given rev to compare the actual SearchData's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SearchData's rev is not equal to the given one.
   */
  public SearchDataAssert hasRev(long rev) {
    // check that actual SearchData we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(errorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

}
