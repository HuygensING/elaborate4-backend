package elaborate.editor.model;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;


/**
 * {@link SessionService.Session} specific assertions - Generated by CustomAssertionGenerator.
 */
public class SessionAssert extends AbstractAssert<SessionAssert, SessionService.Session> {

  /**
   * Creates a new </code>{@link SessionAssert}</code> to make assertions on actual SessionService.Session.
   * @param actual the SessionService.Session we want to make assertions on.
   */
  public SessionAssert(SessionService.Session actual) {
    super(actual, SessionAssert.class);
  }

  /**
   * An entry point for SessionAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(mySessionService.Session)</code> and get specific assertion with code completion.
   * @param actual the SessionService.Session we want to make assertions on.
   * @return a new </code>{@link SessionAssert}</code>
   */
  public static SessionAssert assertThat(SessionService.Session actual) {
    return new SessionAssert(actual);
  }

  /**
   * Verifies that the actual SessionService.Session is active.
   * @return this assertion object.
   * @throws AssertionError - if the actual SessionService.Session is not active.
   */
  public SessionAssert isActive() {
    // check that actual SessionService.Session we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.isActive()) {
      failWithMessage("\nExpected actual SessionService.Session to be active but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SessionService.Session is not active.
   * @return this assertion object.
   * @throws AssertionError - if the actual SessionService.Session is active.
   */
  public SessionAssert isNotActive() {
    // check that actual SessionService.Session we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.isActive()) {
      failWithMessage("\nExpected actual SessionService.Session not to be active but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual SessionService.Session's userId is equal to the given one.
   * @param userId the given userId to compare the actual SessionService.Session's userId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual SessionService.Session's userId is not equal to the given one.
   */
  public SessionAssert hasUserId(long userId) {
    // check that actual SessionService.Session we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String errorMessage = "\nExpected userId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualUserId = actual.getUserId();
    if (actualUserId != userId) {
      failWithMessage(errorMessage, actual, userId, actualUserId);
    }

    // return the current assertion for method chaining
    return this;
  }

}
