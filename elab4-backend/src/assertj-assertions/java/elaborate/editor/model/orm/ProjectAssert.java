package elaborate.editor.model.orm;

import org.assertj.core.api.AbstractAssert;
// Assertions is needed if an assertion for Iterable is generated
import org.assertj.core.api.Assertions;
import java.util.Date;
import java.util.Map;
import nl.knaw.huygens.facetedsearch.FacetInfo;


/**
 * {@link Project} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ProjectAssert extends AbstractAssert<ProjectAssert, Project> {

  /**
   * Creates a new </code>{@link ProjectAssert}</code> to make assertions on actual Project.
   * @param actual the Project we want to make assertions on.
   */
  public ProjectAssert(Project actual) {
    super(actual, ProjectAssert.class);
  }

  /**
   * An entry point for ProjectAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one's can write directly : <code>assertThat(myProject)</code> and get specific assertion with code completion.
   * @param actual the Project we want to make assertions on.
   * @return a new </code>{@link ProjectAssert}</code>
   */
  public static ProjectAssert assertThat(Project actual) {
    return new ProjectAssert(actual);
  }

  /**
   * Verifies that the actual Project's annotationTypes contains the given AnnotationType elements.
   * @param annotationTypes the given elements that should be contained in actual Project's annotationTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's annotationTypes does not contain all given AnnotationType elements.
   */
  public ProjectAssert hasAnnotationTypes(AnnotationType... annotationTypes) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given AnnotationType varargs is not null.
    if (annotationTypes == null) throw new AssertionError("Expecting annotationTypes parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getAnnotationTypes()).contains(annotationTypes);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getAnnotationTypes().contains(annotationTypes)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getAnnotationTypes()).overridingErrorMessage("\nmy error message %s", "arg1").contains(annotationTypes);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no annotationTypes.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's annotationTypes is not empty.
   */
  public ProjectAssert hasNoAnnotationTypes() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have annotationTypes but had :\n  <%s>";
    
    // check
    if (!actual.getAnnotationTypes().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getAnnotationTypes());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's createdOn is equal to the given one.
   * @param createdOn the given createdOn to compare the actual Project's createdOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's createdOn is not equal to the given one.
   */
  public ProjectAssert hasCreatedOn(Date createdOn) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected createdOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualCreatedOn = actual.getCreatedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualCreatedOn, createdOn)) {
      failWithMessage(assertjErrorMessage, actual, createdOn, actualCreatedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's creator is equal to the given one.
   * @param creator the given creator to compare the actual Project's creator to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's creator is not equal to the given one.
   */
  public ProjectAssert hasCreator(User creator) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected creator of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualCreator = actual.getCreator();
    if (!org.assertj.core.util.Objects.areEqual(actualCreator, creator)) {
      failWithMessage(assertjErrorMessage, actual, creator, actualCreator);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's facetFields contains the given String elements.
   * @param facetFields the given elements that should be contained in actual Project's facetFields.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's facetFields does not contain all given String elements.
   */
  public ProjectAssert hasFacetFields(String... facetFields) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (facetFields == null) throw new AssertionError("Expecting facetFields parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getFacetFields()).contains(facetFields);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getFacetFields().contains(facetFields)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getFacetFields()).overridingErrorMessage("\nmy error message %s", "arg1").contains(facetFields);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no facetFields.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's facetFields is not empty.
   */
  public ProjectAssert hasNoFacetFields() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have facetFields but had :\n  <%s>";
    
    // check
    if (actual.getFacetFields().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getFacetFields()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's facetInfo contains the given FacetInfo elements.
   * @param facetInfo the given elements that should be contained in actual Project's facetInfo.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's facetInfo does not contain all given FacetInfo elements.
   */
  public ProjectAssert hasFacetInfo(FacetInfo... facetInfo) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given FacetInfo varargs is not null.
    if (facetInfo == null) throw new AssertionError("Expecting facetInfo parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getFacetInfo()).contains(facetInfo);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getFacetInfo().contains(facetInfo)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getFacetInfo()).overridingErrorMessage("\nmy error message %s", "arg1").contains(facetInfo);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no facetInfo.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's facetInfo is not empty.
   */
  public ProjectAssert hasNoFacetInfo() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have facetInfo but had :\n  <%s>";
    
    // check
    if (!actual.getFacetInfo().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getFacetInfo());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's facetInfoMap is equal to the given one.
   * @param facetInfoMap the given facetInfoMap to compare the actual Project's facetInfoMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's facetInfoMap is not equal to the given one.
   */
  public ProjectAssert hasFacetInfoMap(Map facetInfoMap) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected facetInfoMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Map actualFacetInfoMap = actual.getFacetInfoMap();
    if (!org.assertj.core.util.Objects.areEqual(actualFacetInfoMap, facetInfoMap)) {
      failWithMessage(assertjErrorMessage, actual, facetInfoMap, actualFacetInfoMap);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's id is equal to the given one.
   * @param id the given id to compare the actual Project's id to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's id is not equal to the given one.
   */
  public ProjectAssert hasId(long id) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected id of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualId = actual.getId();
    if (actualId != id) {
      failWithMessage(assertjErrorMessage, actual, id, actualId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's level1 is equal to the given one.
   * @param level1 the given level1 to compare the actual Project's level1 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's level1 is not equal to the given one.
   */
  public ProjectAssert hasLevel1(String level1) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected level1 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLevel1 = actual.getLevel1();
    if (!org.assertj.core.util.Objects.areEqual(actualLevel1, level1)) {
      failWithMessage(assertjErrorMessage, actual, level1, actualLevel1);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's level2 is equal to the given one.
   * @param level2 the given level2 to compare the actual Project's level2 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's level2 is not equal to the given one.
   */
  public ProjectAssert hasLevel2(String level2) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected level2 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLevel2 = actual.getLevel2();
    if (!org.assertj.core.util.Objects.areEqual(actualLevel2, level2)) {
      failWithMessage(assertjErrorMessage, actual, level2, actualLevel2);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's level3 is equal to the given one.
   * @param level3 the given level3 to compare the actual Project's level3 to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's level3 is not equal to the given one.
   */
  public ProjectAssert hasLevel3(String level3) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected level3 of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualLevel3 = actual.getLevel3();
    if (!org.assertj.core.util.Objects.areEqual(actualLevel3, level3)) {
      failWithMessage(assertjErrorMessage, actual, level3, actualLevel3);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's logEntries contains the given LogEntry elements.
   * @param logEntries the given elements that should be contained in actual Project's logEntries.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's logEntries does not contain all given LogEntry elements.
   */
  public ProjectAssert hasLogEntries(LogEntry... logEntries) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given LogEntry varargs is not null.
    if (logEntries == null) throw new AssertionError("Expecting logEntries parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getLogEntries()).contains(logEntries);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getLogEntries().contains(logEntries)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getLogEntries()).overridingErrorMessage("\nmy error message %s", "arg1").contains(logEntries);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no logEntries.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's logEntries is not empty.
   */
  public ProjectAssert hasNoLogEntries() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have logEntries but had :\n  <%s>";
    
    // check
    if (!actual.getLogEntries().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getLogEntries());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's metadataMap is equal to the given one.
   * @param metadataMap the given metadataMap to compare the actual Project's metadataMap to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's metadataMap is not equal to the given one.
   */
  public ProjectAssert hasMetadataMap(Map metadataMap) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected metadataMap of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Map actualMetadataMap = actual.getMetadataMap();
    if (!org.assertj.core.util.Objects.areEqual(actualMetadataMap, metadataMap)) {
      failWithMessage(assertjErrorMessage, actual, metadataMap, actualMetadataMap);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's modifiedOn is equal to the given one.
   * @param modifiedOn the given modifiedOn to compare the actual Project's modifiedOn to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's modifiedOn is not equal to the given one.
   */
  public ProjectAssert hasModifiedOn(Date modifiedOn) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected modifiedOn of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    Date actualModifiedOn = actual.getModifiedOn();
    if (!org.assertj.core.util.Objects.areEqual(actualModifiedOn, modifiedOn)) {
      failWithMessage(assertjErrorMessage, actual, modifiedOn, actualModifiedOn);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's modifier is equal to the given one.
   * @param modifier the given modifier to compare the actual Project's modifier to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's modifier is not equal to the given one.
   */
  public ProjectAssert hasModifier(User modifier) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected modifier of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    User actualModifier = actual.getModifier();
    if (!org.assertj.core.util.Objects.areEqual(actualModifier, modifier)) {
      failWithMessage(assertjErrorMessage, actual, modifier, actualModifier);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's name is equal to the given one.
   * @param name the given name to compare the actual Project's name to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's name is not equal to the given one.
   */
  public ProjectAssert hasName(String name) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected name of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualName = actual.getName();
    if (!org.assertj.core.util.Objects.areEqual(actualName, name)) {
      failWithMessage(assertjErrorMessage, actual, name, actualName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's projectEntries contains the given ProjectEntry elements.
   * @param projectEntries the given elements that should be contained in actual Project's projectEntries.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectEntries does not contain all given ProjectEntry elements.
   */
  public ProjectAssert hasProjectEntries(ProjectEntry... projectEntries) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given ProjectEntry varargs is not null.
    if (projectEntries == null) throw new AssertionError("Expecting projectEntries parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getProjectEntries()).contains(projectEntries);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getProjectEntries().contains(projectEntries)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getProjectEntries()).overridingErrorMessage("\nmy error message %s", "arg1").contains(projectEntries);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no projectEntries.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectEntries is not empty.
   */
  public ProjectAssert hasNoProjectEntries() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have projectEntries but had :\n  <%s>";
    
    // check
    if (!actual.getProjectEntries().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getProjectEntries());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's projectEntryMetadataFieldnames contains the given String elements.
   * @param projectEntryMetadataFieldnames the given elements that should be contained in actual Project's projectEntryMetadataFieldnames.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectEntryMetadataFieldnames does not contain all given String elements.
   */
  public ProjectAssert hasProjectEntryMetadataFieldnames(String... projectEntryMetadataFieldnames) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (projectEntryMetadataFieldnames == null) throw new AssertionError("Expecting projectEntryMetadataFieldnames parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getProjectEntryMetadataFieldnames()).contains(projectEntryMetadataFieldnames);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getProjectEntryMetadataFieldnames().contains(projectEntryMetadataFieldnames)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getProjectEntryMetadataFieldnames()).overridingErrorMessage("\nmy error message %s", "arg1").contains(projectEntryMetadataFieldnames);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no projectEntryMetadataFieldnames.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectEntryMetadataFieldnames is not empty.
   */
  public ProjectAssert hasNoProjectEntryMetadataFieldnames() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have projectEntryMetadataFieldnames but had :\n  <%s>";
    
    // check
    if (actual.getProjectEntryMetadataFieldnames().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getProjectEntryMetadataFieldnames()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's projectLeaderId is equal to the given one.
   * @param projectLeaderId the given projectLeaderId to compare the actual Project's projectLeaderId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's projectLeaderId is not equal to the given one.
   */
  public ProjectAssert hasProjectLeaderId(long projectLeaderId) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected projectLeaderId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualProjectLeaderId = actual.getProjectLeaderId();
    if (actualProjectLeaderId != projectLeaderId) {
      failWithMessage(assertjErrorMessage, actual, projectLeaderId, actualProjectLeaderId);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's projectMetadataItems contains the given ProjectMetadataItem elements.
   * @param projectMetadataItems the given elements that should be contained in actual Project's projectMetadataItems.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectMetadataItems does not contain all given ProjectMetadataItem elements.
   */
  public ProjectAssert hasProjectMetadataItems(ProjectMetadataItem... projectMetadataItems) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given ProjectMetadataItem varargs is not null.
    if (projectMetadataItems == null) throw new AssertionError("Expecting projectMetadataItems parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getProjectMetadataItems()).contains(projectMetadataItems);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getProjectMetadataItems().contains(projectMetadataItems)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getProjectMetadataItems()).overridingErrorMessage("\nmy error message %s", "arg1").contains(projectMetadataItems);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no projectMetadataItems.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's projectMetadataItems is not empty.
   */
  public ProjectAssert hasNoProjectMetadataItems() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have projectMetadataItems but had :\n  <%s>";
    
    // check
    if (!actual.getProjectMetadataItems().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getProjectMetadataItems());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's rev is equal to the given one.
   * @param rev the given rev to compare the actual Project's rev to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's rev is not equal to the given one.
   */
  public ProjectAssert hasRev(long rev) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected rev of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualRev = actual.getRev();
    if (actualRev != rev) {
      failWithMessage(assertjErrorMessage, actual, rev, actualRev);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's textLayers contains the given String elements.
   * @param textLayers the given elements that should be contained in actual Project's textLayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's textLayers does not contain all given String elements.
   */
  public ProjectAssert hasTextLayers(String... textLayers) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given String varargs is not null.
    if (textLayers == null) throw new AssertionError("Expecting textLayers parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getTextLayers()).contains(textLayers);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getTextLayers().contains(textLayers)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getTextLayers()).overridingErrorMessage("\nmy error message %s", "arg1").contains(textLayers);
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no textLayers.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's textLayers is not empty.
   */
  public ProjectAssert hasNoTextLayers() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have textLayers but had :\n  <%s>";
    
    // check
    if (actual.getTextLayers().length > 0)  {
      failWithMessage(assertjErrorMessage, actual, java.util.Arrays.toString(actual.getTextLayers()));
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

  /**
   * Verifies that the actual Project's title is equal to the given one.
   * @param title the given title to compare the actual Project's title to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Project's title is not equal to the given one.
   */
  public ProjectAssert hasTitle(String title) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected title of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualTitle = actual.getTitle();
    if (!org.assertj.core.util.Objects.areEqual(actualTitle, title)) {
      failWithMessage(assertjErrorMessage, actual, title, actualTitle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project's users contains the given User elements.
   * @param users the given elements that should be contained in actual Project's users.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's users does not contain all given User elements.
   */
  public ProjectAssert hasUsers(User... users) {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // check that given User varargs is not null.
    if (users == null) throw new AssertionError("Expecting users parameter not to be null.");
    
    // check with standard error message (see commented below to set your own message).
    Assertions.assertThat(actual.getUsers()).contains(users);

    // To override the standard error message :
    // - remove the previous call to Assertions.assertThat(actual.getUsers().contains(users)
    // - uncomment the line below and set your error message:
    // Assertions.assertThat(actual.getUsers()).overridingErrorMessage("\nmy error message %s", "arg1").contains(users);

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual Project has no users.
   * @return this assertion object.
   * @throws AssertionError if the actual Project's users is not empty.
   */
  public ProjectAssert hasNoUsers() {
    // check that actual Project we want to make assertions on is not null.
    isNotNull();

    // we override the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected :\n  <%s>\nnot to have users but had :\n  <%s>";
    
    // check
    if (!actual.getUsers().isEmpty()) {
      failWithMessage(assertjErrorMessage, actual, actual.getUsers());
    }
    
    // return the current assertion for method chaining
    return this;
  }
  

}
